import time


'''Checks to see if user's email is already registered.'''
def check_existing_email(self, email, email_list):
    if email in email_list:
        return True
    else:
        return False
    
def get_userdata(userID: str):
    ### Return User object based on ID
    pass

'''Will manage friends, including methods to get most recently online friends'''
class FriendsList:
    def __init__(self, userID: str):
        self.user = userID
        self.friends = [] # List of friend's userIDs

    '''0 = Recently online, 1 = Recently added, 2 = Alphabetical'''
    def get_friends_preview(self, option: int):
        if option == 1:
            return self.friends[:-10]

    def get_friends_list(self):
        return self.friends
    
    def send_friend_request(self, userID):
        if userID not in self.friends:
            pass

    def recieve_accept(self, userID):
        self.friends.append(userID)

    def recieve_friend_request(self, userID):
        ### Prompt user
        yes = True
        if yes:
            self.friends.append(userID)
        else:
            ### Send rejection
            pass

    def remove_friend(self, userID):
        if userID in self.friends:
            self.friends.remove(userID)

    


'''Resume-style experiences will be stored using this class'''
class Job:
    pass

class User:
    def __init__(self, username: str, password: str, email: str):
        self.username = username
        self.password = password
        self.email = email

        # ID will be generated by hashing the email, password, and registration time together
        self.epoch_registration = int(time.time())
        self.id = self.make_hash()

        # Attributes to be set later
        self.firstname = None
        self.lastname = None
        self.title = None
        self.pronouns = None
        self.description = None


        self.jobs = [] # List of Job Objects


        self.friends = [] # New Friendslist object

    '''Hashes a unique id for the user'''
    def make_hash(self):
        # Placeholder hashing alg
        epoch = str(self.epoch_registration)
        email = self.email
        passwd = self.password

        hash = epoch + email + passwd

        return hash[::-1]
    
    ### Accessing Methods


    '''Username'''
    def get_username(self):
        return self.username
    
    def set_username(self, newname: str):
        self.username = newname
    

    '''Email'''
    def get_email(self):
        return self.email
    
    def set_email(self, newmail: str):
        self.email = newmail


    '''Password'''
    def get_password(self):
        return self.password
    
    def set_password(self, newpass: str):
        self.password = newpass
    

    '''ID'''
    def get_id(self):
        return self.id
    

    '''First Name'''
    def get_firstname(self):
        return self.firstname
    
    def set_firstname(self, newname: str):
        self.firstname = newname
    

    '''Last Name'''
    def get_lastname(self):
        return self.lastname
    
    def set_lastname(self, newname: str):
        self.lastname = newname
    

    '''Title'''
    def get_title(self):
        return self.title
    
    def set_title(self, newtitle: str):
        self.title = newtitle
    

    '''Pronouns'''
    def get_pronouns(self):
        return self.pronouns
    
    def set_pronouns(self, newpronouns: str):
        self.pronouns = newpronouns


    '''Description'''
    def get_description(self):
        return self.description
    
    def set_description(self, newdescription: str):
        self.description = newdescription
    

    '''Jobs'''
    def get_jobs(self):
        return self.jobs
    
    def add_job(self, Job):
        pass

    def remove_job(self, index):
        pass


    '''FriendsList'''
    def get_friendslist(self):
        return self.friends